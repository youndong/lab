// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PAYLOAD_H_
#define FLATBUFFERS_GENERATED_PAYLOAD_H_

#include "flatbuffers/flatbuffers.h"

struct Payload;
struct PayloadBuilder;

struct Payload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PayloadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_DATA = 6
  };
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
};

struct PayloadBuilder {
  typedef Payload Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(Payload::VT_STATUS, status, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(Payload::VT_DATA, data);
  }
  explicit PayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Payload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Payload>(end);
    return o;
  }
};

inline flatbuffers::Offset<Payload> CreatePayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0,
    flatbuffers::Offset<flatbuffers::String> data = 0) {
  PayloadBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<Payload> CreatePayloadDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return CreatePayload(
      _fbb,
      status,
      data__);
}

inline const Payload *GetPayload(const void *buf) {
  return flatbuffers::GetRoot<Payload>(buf);
}

inline const Payload *GetSizePrefixedPayload(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Payload>(buf);
}

inline bool VerifyPayloadBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Payload>(nullptr);
}

inline bool VerifySizePrefixedPayloadBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Payload>(nullptr);
}

inline void FinishPayloadBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Payload> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPayloadBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Payload> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PAYLOAD_H_
