// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PAYLOAD_SAMPLE_SERVICE_H_
#define FLATBUFFERS_GENERATED_PAYLOAD_SAMPLE_SERVICE_H_

#include "flatbuffers/flatbuffers.h"

namespace Sample {
namespace Service {

struct Payload;
struct PayloadBuilder;

struct Result;
struct ResultBuilder;

enum Status : int8_t {
  Status_NO_ERROR = 0,
  Status_INVALID_PARAMS = 1,
  Status_UNKNOWN_ERROR = 2,
  Status_MIN = Status_NO_ERROR,
  Status_MAX = Status_UNKNOWN_ERROR
};

inline const Status (&EnumValuesStatus())[3] {
  static const Status values[] = {
    Status_NO_ERROR,
    Status_INVALID_PARAMS,
    Status_UNKNOWN_ERROR
  };
  return values;
}

inline const char * const *EnumNamesStatus() {
  static const char * const names[4] = {
    "NO_ERROR",
    "INVALID_PARAMS",
    "UNKNOWN_ERROR",
    nullptr
  };
  return names;
}

inline const char *EnumNameStatus(Status e) {
  if (flatbuffers::IsOutRange(e, Status_NO_ERROR, Status_UNKNOWN_ERROR)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStatus()[index];
}

struct Payload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PayloadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_DATA = 6
  };
  Sample::Service::Status status() const {
    return static_cast<Sample::Service::Status>(GetField<int8_t>(VT_STATUS, 0));
  }
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
};

struct PayloadBuilder {
  typedef Payload Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(Sample::Service::Status status) {
    fbb_.AddElement<int8_t>(Payload::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(Payload::VT_DATA, data);
  }
  explicit PayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Payload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Payload>(end);
    return o;
  }
};

inline flatbuffers::Offset<Payload> CreatePayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    Sample::Service::Status status = Sample::Service::Status_NO_ERROR,
    flatbuffers::Offset<flatbuffers::String> data = 0) {
  PayloadBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<Payload> CreatePayloadDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    Sample::Service::Status status = Sample::Service::Status_NO_ERROR,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return Sample::Service::CreatePayload(
      _fbb,
      status,
      data__);
}

struct Result FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_DATA = 6
  };
  Sample::Service::Status status() const {
    return static_cast<Sample::Service::Status>(GetField<int8_t>(VT_STATUS, 0));
  }
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
};

struct ResultBuilder {
  typedef Result Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(Sample::Service::Status status) {
    fbb_.AddElement<int8_t>(Result::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(Result::VT_DATA, data);
  }
  explicit ResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Result> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Result>(end);
    return o;
  }
};

inline flatbuffers::Offset<Result> CreateResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    Sample::Service::Status status = Sample::Service::Status_NO_ERROR,
    flatbuffers::Offset<flatbuffers::String> data = 0) {
  ResultBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<Result> CreateResultDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    Sample::Service::Status status = Sample::Service::Status_NO_ERROR,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return Sample::Service::CreateResult(
      _fbb,
      status,
      data__);
}

}  // namespace Service
}  // namespace Sample

#endif  // FLATBUFFERS_GENERATED_PAYLOAD_SAMPLE_SERVICE_H_
