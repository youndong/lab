
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__service_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__service_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace com {
namespace example {

class SampleInterface_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    SampleInterface_adaptor()
    : ::DBus::InterfaceAdaptor("com.example.SampleInterface")
    {
        bind_property(Bar, "y", true, true);
        register_method(SampleInterface_adaptor, fbs, _fbs_stub);
        register_method(SampleInterface_adaptor, Method_A, _Method_A_stub);
        register_method(SampleInterface_adaptor, Method_B, _Method_B_stub);
        register_method(SampleInterface_adaptor, Method_C, _Method_C_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument fbs_args[] = 
        {
            { "payload", "ay", true },
            { "result", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Method_A_args[] = 
        {
            { "foo", "i", true },
            { "bar", "s", false },
            { "baz", "a{us}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Method_B_args[] = 
        {
            { "bar", "(iiu)", true },
            { "bar", "v", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Method_C_args[] = 
        {
            { "bar", "(iiav)", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Changed_args[] = 
        {
            { "new_value", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument PropertyChanged_args[] = 
        {
            { 0, "s", false },
            { 0, "v", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod SampleInterface_adaptor_methods[] = 
        {
            { "fbs", fbs_args },
            { "Method_A", Method_A_args },
            { "Method_B", Method_B_args },
            { "Method_C", Method_C_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod SampleInterface_adaptor_signals[] = 
        {
            { "Changed", Changed_args },
            { "PropertyChanged", PropertyChanged_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty SampleInterface_adaptor_properties[] = 
        {
            { "Bar", "y", true, true },
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface SampleInterface_adaptor_interface = 
        {
            "com.example.SampleInterface",
            SampleInterface_adaptor_methods,
            SampleInterface_adaptor_signals,
            SampleInterface_adaptor_properties
        };
        return &SampleInterface_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */
    ::DBus::PropertyAdaptor< uint8_t > Bar;

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< uint8_t > fbs(const std::vector< uint8_t >& payload) = 0;
    virtual void Method_A(const int32_t& foo, std::string& bar, std::map< uint32_t, std::string >& baz) = 0;
    virtual ::DBus::Variant Method_B(const ::DBus::Struct< int32_t, int32_t, uint32_t >& bar) = 0;
    virtual void Method_C(const ::DBus::Struct< int32_t, int32_t, std::vector< ::DBus::Variant > >& bar) = 0;

public:

    /* signal emitters for this interface
     */
    void Changed(const bool& arg1)
    {
        ::DBus::SignalMessage sig("Changed");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void PropertyChanged(const std::string& arg1, const ::DBus::Variant& arg2)
    {
        ::DBus::SignalMessage sig("PropertyChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _fbs_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = fbs(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Method_A_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        std::string argout1;
        std::map< uint32_t, std::string > argout2;
        Method_A(argin1, argout1, argout2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        wi << argout2;
        return reply;
    }
    ::DBus::Message _Method_B_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Struct< int32_t, int32_t, uint32_t > argin1; ri >> argin1;
        ::DBus::Variant argout1 = Method_B(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Method_C_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Struct< int32_t, int32_t, std::vector< ::DBus::Variant > > argin1; ri >> argin1;
        Method_C(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
#endif //__dbusxx__service_adaptor_h__ADAPTOR_MARSHAL_H
